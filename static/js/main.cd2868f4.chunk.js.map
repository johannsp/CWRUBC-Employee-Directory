{"version":3,"sources":["utils/API.js","components/Wrapper/index.js","components/Card/index.js","components/Title/index.js","components/FilterForm/index.js","components/EmployeeCard/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Wrapper","props","className","children","Card","heading","Title","FilterForm","htmlFor","onChange","handleInputChange","value","name","type","placeholder","id","onClick","handleFormSubmit","EmployeeCard","alt","src","image","gender","email","phone","cell","registered","App","state","name_filter","all_employees","employees","loadRandomUsers","API","then","res","setState","data","results","catch","err","console","log","event","target","preventDefault","filter","employee","first","last","match","RegExp","this","map","login","uuid","key","picture","medium","date","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.cd2868f4.chunk.js","sourcesContent":["import axios from \"axios\";\n\n// Export an object containing random user method(s)\n\nexport default {\n  getRandomUsers: function() {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n  }\n};\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\">{props.children}</main>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\n\nfunction Card(props) {\n  return (\n    <div className=\"card text-center\">\n      <div className=\"card-header\">\n        <h2>{props.heading}</h2>\n      </div>\n      <div className=\"card-body\">{props.children}</div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\n\nfunction FilterForm(props) {\n  return (\n    <form>\n      <div className=\"form-group\">\n        <label htmlFor=\"name_filter\">Name filter:</label>\n        <input\n          onChange={props.handleInputChange}\n          value={props.value}\n          name=\"name_filter\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Name filter\"\n          id=\"name_filter\"\n        />\n        <br />\n        <button onClick={props.handleFormSubmit} className=\"btn btn-primary\">\n          Filter\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default FilterForm;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction EmployeeCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n      <div className=\"content\">\n        <ul>\n          <li>\n            <strong>Name:</strong> {props.name} &nbsp;&nbsp;\n            {props.gender}\n          </li>\n          <li>\n            <strong>Email:</strong> {props.email}\n          </li>\n          <li>\n            <strong>Telephone:</strong> {props.phone}\n          </li>\n          <li>\n            <strong>Cell/mobile:</strong> {props.cell}\n          </li>\n          <li>\n            <strong>Registered:</strong> {props.registered}\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default EmployeeCard;\n","import React, { Component } from 'react';\nimport API from \"./utils/API\";\nimport Wrapper from \"./components/Wrapper\";\nimport Card from \"./components/Card\";\nimport Title from \"./components/Title\";\nimport FilterForm from \"./components/FilterForm\";\nimport './App.css';\nimport EmployeeCard from \"./components/EmployeeCard\";\n\nclass App extends Component {\n  state = {\n    name_filter: \"\",\n    all_employees: [],\n    employees: []\n  };\n\n  // When the component mounts, load the next dog to be displayed\n  componentDidMount() {\n    this.loadRandomUsers();\n  }\n\n  loadRandomUsers = () => {\n    API.getRandomUsers()\n      .then(res =>\n        this.setState({\n          all_employees: res.data.results,\n          employees: res.data.results\n        })\n      )\n      .catch(err => console.log(err));\n  };\n\n  handleInputChange = event => {\n    const value = event.target.value;\n    const name = event.target.name;\n    this.setState({\n      ...this.state,\n      [name]: value\n    });\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n    const name_filter = this.state.name_filter;\n    // Filter this.state.employees for employees with an id not equal to the id being removed\n    const employees = this.state.all_employees.filter(employee => {\n      const name=`${employee.name.first} ${employee.name.last}`;\n      return name.match(RegExp(name_filter));\n    });\n    /* {{{ **\n    ** name_filter = \"\";\n    ** }}} */\n    // Set this.state.employees equal to the new employees array\n    this.setState({\n      ...this.state,\n      employees\n    });\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Title>Employee List</Title>\n        <Card heading=\"Filter\">\n          <FilterForm\n            value={this.state.name_filter}\n            handleInputChange={this.handleInputChange}\n            handleFormSubmit={this.handleFormSubmit}\n          />\n        </Card>\n        {this.state.employees.map(employee => (\n          <EmployeeCard\n            id={employee.login.uuid}\n            key={employee.login.uuid}\n            name={`${employee.name.first} ${employee.name.last}`}\n            gender={employee.gender}\n            email={employee.email}\n            phone={employee.phone}\n            cell={employee.cell}\n            image={employee.picture.medium}\n            registered={employee.registered.date}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}